from flask import Flask, render_template, request, redirect, url_for, flash
from flask_pymongo import PyMongo
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from bson import ObjectId
from werkzeug.utils import secure_filename
import os

app = Flask(__name__)
app.config["MONGO_URI"] = "mongodb://localhost:27017/blogDB"
app.secret_key = "your_secret_key"

mongo = PyMongo(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

# Set the upload folder for profile images
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}

# Check if the file extension is allowed
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

class User(UserMixin):
    def __init__(self, id, username, password, bio=None, profile_picture=None):
        self.id = id
        self.username = username
        self.password = password
        self.bio = bio
        self.profile_picture = profile_picture

# Load user by ID
@login_manager.user_loader
def load_user(user_id):
    user = mongo.db.users.find_one({"_id": ObjectId(user_id)})
    if user:
        return User(str(user["_id"]), user["username"], user["password"], user.get("bio"), user.get("profile_picture"))
    return None

# Route to view and update user profile
@app.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    user = mongo.db.users.find_one({"_id": ObjectId(current_user.id)})
    
    if request.method == 'POST':
        bio = request.form.get('bio')
        profile_picture = None

        if 'profile_picture' in request.files:
            file = request.files['profile_picture']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                profile_picture = file_path
        
        mongo.db.users.update_one(
            {"_id": ObjectId(current_user.id)}, 
            {"$set": {"bio": bio, "profile_picture": profile_picture}}
        )

        flash("Profile updated successfully!", 'success')
        return redirect(url_for('profile'))
    
    return render_template('profile.html', user=user)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = mongo.db.users.find_one({"username": username})
        if user and check_password_hash(user["password"], password):
            user_obj = User(str(user["_id"]), user["username"], user["password"], user.get("bio"), user.get("profile_picture"))
            login_user(user_obj)
            return redirect(url_for('dashboard'))
        else:
            flash("Invalid credentials, please try again.", 'danger')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        bio = request.form.get('bio')
        profile_picture = None

        if 'profile_picture' in request.files:
            file = request.files['profile_picture']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                profile_picture = file_path

        hashed_password = generate_password_hash(password)
        mongo.db.users.insert_one({
            "username": username,
            "password": hashed_password,
            "bio": bio,
            "profile_picture": profile_picture
        })
        flash("Registration successful! You can now log in.", 'success')
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/dashboard')
@login_required
def dashboard():
    user_blogs = mongo.db.blogs.find({"user_id": ObjectId(current_user.id)})
    return render_template('dashboard.html', blogs=user_blogs)

@app.route('/create_blog', methods=['GET', 'POST'])
@login_required
def create_blog():
    if request.method == 'POST':
        title = request.form['title']
        content = request.form['content']
        mongo.db.blogs.insert_one({
            "user_id": ObjectId(current_user.id),
            "title": title,
            "content": content
        })
        flash("Blog created successfully!", 'success')
        return redirect(url_for('dashboard'))
    return render_template('create_blog.html')

@app.route('/edit_blog/<blog_id>', methods=['GET', 'POST'])
@login_required
def edit_blog(blog_id):
    blog = mongo.db.blogs.find_one({"_id": ObjectId(blog_id)})
    if blog and str(blog["user_id"]) == current_user.id:
        if request.method == 'POST':
            title = request.form['title']
            content = request.form['content']
            mongo.db.blogs.update_one({"_id": ObjectId(blog_id)}, {"$set": {"title": title, "content": content}})
            flash("Blog updated successfully!", 'success')
            return redirect(url_for('dashboard'))
        return render_template('create_blog.html', blog=blog)
    else:
        flash("Unauthorized or blog not found.", 'danger')
        return redirect(url_for('dashboard'))

@app.route('/delete_blog/<blog_id>')
@login_required
def delete_blog(blog_id):
    blog = mongo.db.blogs.find_one({"_id": ObjectId(blog_id)})
    if blog and str(blog["user_id"]) == current_user.id:
        mongo.db.blogs.delete_one({"_id": ObjectId(blog_id)})
        flash("Blog deleted successfully!", 'success')
    else:
        flash("Unauthorized or blog not found.", 'danger')
    return redirect(url_for('dashboard'))

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('home'))

if __name__ == '__main__':
    app.run(debug=True)
